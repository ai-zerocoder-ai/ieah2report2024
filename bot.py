# bot.py

import logging
import os
import threading
import time
from concurrent.futures import ThreadPoolExecutor

import telebot
from telebot import types
from dotenv import load_dotenv

from config import TELEGRAM_BOT_TOKEN, OPENAI_API_KEY, KNOWLEDGE_BASE_PATH, ADMIN_ID

from langchain.text_splitter import RecursiveCharacterTextSplitter
from langchain_community.document_loaders import TextLoader
from langchain_openai.embeddings import OpenAIEmbeddings  # –û–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π –∏–º–ø–æ—Ä—Ç
from langchain_community.vectorstores import Chroma
from langchain_openai import ChatOpenAI
from langchain.chains import RetrievalQA
from langchain.prompts import PromptTemplate

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger(__name__)
logger.setLevel(logging.INFO)  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±—â–∏–π —É—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è

# –§–æ—Ä–º–∞—Ç—Ç–µ—Ä –¥–ª—è –ª–æ–≥–æ–≤
formatter = logging.Formatter('%(asctime)s - %(levelname)s - %(message)s')

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è INFO –∏ –≤—ã—à–µ —Å —Ä–æ—Ç–∞—Ü–∏–µ–π
from logging.handlers import RotatingFileHandler

handler_info = RotatingFileHandler("bot_info.log", maxBytes=5 * 1024 * 1024, backupCount=5)
handler_info.setLevel(logging.INFO)
handler_info.setFormatter(formatter)
logger.addHandler(handler_info)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è ERROR –∏ –≤—ã—à–µ —Å —Ä–æ—Ç–∞—Ü–∏–µ–π
handler_error = RotatingFileHandler("bot_error.log", maxBytes=5 * 1024 * 1024, backupCount=5)
handler_error.setLevel(logging.ERROR)
handler_error.setFormatter(formatter)
logger.addHandler(handler_error)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—ã–≤–æ–¥–∞ –ª–æ–≥–æ–≤ –Ω–∞ –∫–æ–Ω—Å–æ–ª—å
console_handler = logging.StreamHandler()
console_handler.setLevel(logging.INFO)
console_handler.setFormatter(formatter)
logger.addHandler(console_handler)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram –±–æ—Ç–∞
bot = telebot.TeleBot(TELEGRAM_BOT_TOKEN)

# –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –≤–µ–∫—Ç–æ—Ä–Ω–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
PERSIST_DIRECTORY = 'vector_db'

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—É–ª–∞ –ø–æ—Ç–æ–∫–æ–≤
executor = ThreadPoolExecutor(max_workers=10)


def prepare_vector_db(file_path, persist_directory):
    """
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç –∏ –ø–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ—Ç –≤–µ–∫—Ç–æ—Ä–Ω—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∏–∑ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞.

    :param file_path: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å –±–∞–∑–æ–π –∑–Ω–∞–Ω–∏–π.
    :param persist_directory: –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤–µ–∫—Ç–æ—Ä–Ω–æ–π –±–∞–∑—ã.
    :return: –û–±—ä–µ–∫—Ç –≤–µ–∫—Ç–æ—Ä–Ω–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ None –ø—Ä–∏ –æ—à–∏–±–∫–µ.
    """
    try:
        if not os.path.isfile(file_path):
            logger.error(f"–ü—É—Ç—å –∫ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ñ–∞–π–ª–æ–º, –Ω–æ –ø–æ–ª—É—á–µ–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: '{file_path}'")
            return None

        loader = TextLoader(file_path, encoding='utf-8')
        docs = loader.load()
        if not docs:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç –∏–∑ —Ñ–∞–π–ª–∞: '{file_path}'")
            return None
        logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω –¥–æ–∫—É–º–µ–Ω—Ç: {file_path}")

        splitter = RecursiveCharacterTextSplitter(
            chunk_size=3000,
            chunk_overlap=500,
            separators=["\n\n", "\n", "(?<=\. )"]
        )
        splitted_texts = splitter.split_documents(docs)
        logger.info(f"–†–∞–∑–¥–µ–ª–µ–Ω–æ –Ω–∞ {len(splitted_texts)} —á–∞–Ω–∫–æ–≤.")

        embedding = OpenAIEmbeddings(openai_api_key=OPENAI_API_KEY)  # –û–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π –∫–ª–∞—Å—Å
        vectordb = Chroma.from_documents(
            documents=splitted_texts,
            embedding=embedding,
            persist_directory=persist_directory
        )
        # –£–¥–∞–ª–∏—Ç–µ –≤—ã–∑–æ–≤ vectordb.persist()
        # vectordb.persist()
        logger.info("–í–µ–∫—Ç–æ—Ä–Ω–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Å–æ–∑–¥–∞–Ω–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞.")
        return vectordb
    except FileNotFoundError:
        logger.error(f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: '{file_path}'")
    except PermissionError:
        logger.error(f"–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ–∞–π–ª—É: '{file_path}'")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ –≤–µ–∫—Ç–æ—Ä–Ω–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
    return None


# –ó–∞–≥—Ä—É–∑–∫–∞ –∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏–µ –≤–µ–∫—Ç–æ—Ä–Ω–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
if os.path.exists(PERSIST_DIRECTORY):
    try:
        embedding = OpenAIEmbeddings(openai_api_key=OPENAI_API_KEY)  # –û–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π –∫–ª–∞—Å—Å
        vectordb = Chroma(
            persist_directory=PERSIST_DIRECTORY,
            embedding_function=embedding
        )
        logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–∞ –≤–µ–∫—Ç–æ—Ä–Ω–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Å {vectordb.count()} –∑–∞–ø–∏—Å–µ–π.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≤–µ–∫—Ç–æ—Ä–Ω–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
        vectordb = prepare_vector_db(KNOWLEDGE_BASE_PATH, PERSIST_DIRECTORY)
else:
    vectordb = prepare_vector_db(KNOWLEDGE_BASE_PATH, PERSIST_DIRECTORY)

if vectordb is None:
    logger.error("–í–µ–∫—Ç–æ—Ä–Ω–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞. –ë–æ—Ç –Ω–µ –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥–µ–ª–∏ ChatOpenAI
try:
    model = ChatOpenAI(
        model_name="gpt-4o-mini",
        temperature=0.2,
        openai_api_key=OPENAI_API_KEY
    )
    logger.info("–ú–æ–¥–µ–ª—å ChatOpenAI –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ.")
except Exception as e:
    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –º–æ–¥–µ–ª–∏ ChatOpenAI: {e}")
    model = None

# –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —à–∞–±–ª–æ–Ω –ø—Ä–æ–º–ø—Ç–∞
prompt_template = PromptTemplate(
    input_variables=["context", "question"],  # –ó–∞–º–µ–Ω–µ–Ω–æ 'query' –Ω–∞ 'question'
    template=(
        "–¢—ã ‚Äî —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –≤–æ–¥–æ—Ä–æ–¥–Ω–æ–π —ç–Ω–µ—Ä–≥–µ—Ç–∏–∫–µ, –∏—Å–ø–æ–ª—å–∑—É—é—â–∏–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π –ú–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω–æ–≥–æ —ç–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–æ–≥–æ –∞–≥–µ–Ω—Ç—Å—Ç–≤–∞ (IEA).\n"
        "–ò—Å–ø–æ–ª—å–∑—É—è –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç, –æ—Ç–≤–µ—Ç—å –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø–æ–ª–Ω–æ –∏ —Ç–æ—á–Ω–æ.\n\n"
        "–ö–æ–Ω—Ç–µ–∫—Å—Ç:\n{context}\n\n"
        "–í–æ–ø—Ä–æ—Å: {question}\n\n"
        "–û—Ç–≤–µ—Ç:"
    )
)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è RetrievalQA —Ü–µ–ø–æ—á–∫–∏ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞
if vectordb and model:
    try:
        retriever = vectordb.as_retriever()
        qa_chain = RetrievalQA.from_chain_type(
            llm=model,
            chain_type="stuff",
            retriever=retriever,
            chain_type_kwargs={"prompt": prompt_template},  # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞
            return_source_documents=False
        )
        logger.info("–¶–µ–ø–æ—á–∫–∞ RetrievalQA –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ —Å –∫–∞—Å—Ç–æ–º–Ω—ã–º –ø—Ä–æ–º–ø—Ç–æ–º.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ RetrievalQA —Ü–µ–ø–æ—á–∫–∏: {e}")
        qa_chain = None
else:
    qa_chain = None

def generate_rag_response(question):
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Retrieval-Augmented Generation (RAG).

    :param question: –í–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    :return: –û—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å –∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ.
    """
    if not qa_chain:
        return "–ë–æ—Ç –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
    try:
        response = qa_chain.run(question)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–µ—Ç–æ–¥ 'run', –∫–æ—Ç–æ—Ä—ã–π –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä–æ–∫—É
        if not response.strip():
            return "–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ —Å–º–æ–≥ –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É."
        return response
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞ —á–µ—Ä–µ–∑ RAG: {e}")
        return "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."

# –°–ø–∏—Å–æ–∫ ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
ADMIN_IDS = {ADMIN_ID}  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ Telegram ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@bot.message_handler(commands=['start'])
def send_welcome(message):
    welcome_text = (
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø AI-–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç, –∏—Å–ø–æ–ª—å–∑—É—é—â–∏–π –±–∞–∑—É –∑–Ω–∞–Ω–∏–π –ú–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω–æ–≥–æ —ç–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–æ–≥–æ –∞–≥–µ–Ω—Ç—Å—Ç–≤–∞ –ø–æ –≤–æ–¥–æ—Ä–æ–¥–Ω–æ–π —ç–Ω–µ—Ä–≥–µ—Ç–∏–∫–µ.\n\n"
        "üìå –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /iea, —á—Ç–æ–±—ã –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å. –ù–∞–ø—Ä–∏–º–µ—Ä:\n"
        "/iea –ö–∞–∫–æ–≤ —Ç–µ–∫—É—â–∏–π —Å–ø—Ä–æ—Å –Ω–∞ –≤–æ–¥–æ—Ä–æ–¥?\n\n"
        "–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª AI-–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ –∏ –±–∞–∑–∞ –∑–Ω–∞–Ω–∏–π –º–æ–≥—É—Ç –±—ã—Ç—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –ø–æ –∂–µ–ª–∞–Ω–∏—é –∑–∞–∫–∞–∑—á–∏–∫–∞. –î–ª—è —ç—Ç–æ–≥–æ –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –Ω–∞ tattoointelligence.tech."
    )
    bot.send_message(message.chat.id, welcome_text, parse_mode='Markdown')

@bot.message_handler(commands=['iea'])
def handle_iea_command(message):
    try:
        user_input = message.text.partition(' ')[2].strip()
        if not user_input:
            bot.reply_to(message,
                         "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /iea. –ü—Ä–∏–º–µ—Ä:\n/iea –ö–∞–∫–æ–≤ —Ç–µ–∫—É—â–∏–π —Å–ø—Ä–æ—Å –Ω–∞ –≤–æ–¥–æ—Ä–æ–¥?")
            return

        logger.info(f"–ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}: {user_input}")

        executor.submit(process_and_reply, message, user_input)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ –∫–æ–º–∞–Ω–¥—ã /iea: {e}", exc_info=True)
        bot.reply_to(message, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

def process_and_reply(message, user_input):
    try:
        response = generate_rag_response(user_input)
        bot.send_message(message.chat.id, response, parse_mode='Markdown')
    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã /iea:")
        bot.send_message(message.chat.id,
                         "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@bot.message_handler(commands=['reload_kb'])
def reload_knowledge_base_command(message):
    if message.from_user.id not in ADMIN_IDS:
        bot.reply_to(message, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –ø–æ–ø—ã—Ç–∞–ª—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É /reload_kb.")
        return

    try:
        global vectordb, retriever, qa_chain
        vectordb = prepare_vector_db(KNOWLEDGE_BASE_PATH, PERSIST_DIRECTORY)
        if vectordb and model:
            retriever = vectordb.as_retriever()
            qa_chain = RetrievalQA.from_chain_type(
                llm=model,
                chain_type="stuff",
                retriever=retriever,
                chain_type_kwargs={"prompt": prompt_template},  # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞
                return_source_documents=False
            )
            bot.reply_to(message, "–ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞.")
            logger.info(f"–ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π –±—ã–ª–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º {message.from_user.id}.")
        else:
            bot.reply_to(message, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π.")
    except Exception as e:
        bot.reply_to(message, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π.")
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π: {e}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
@bot.message_handler(func=lambda message: True)
def echo_all(message):
    bot.reply_to(message, "–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç—É –∫–æ–º–∞–Ω–¥—É. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /iea –¥–ª—è –≤–æ–ø—Ä–æ—Å–æ–≤ –∏–ª–∏ /start –¥–ª—è –Ω–∞—á–∞–ª–∞.")

def handle_polling_errors():
    while True:
        try:
            logger.info("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
            bot.infinity_polling()
        except (KeyboardInterrupt, SystemExit):
            logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
            break  # –ü—Ä–µ–∫—Ä–∞—â–∞–µ–º —Ü–∏–∫–ª –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –ø—Ä–æ–≥—Ä–∞–º–º—ã
        except Exception as e:
            logger.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤ polling: {e}", exc_info=True)
            logger.info("–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞ —á–µ—Ä–µ–∑ 15 —Å–µ–∫—É–Ω–¥...")
            time.sleep(15)  # –û–∂–∏–¥–∞–Ω–∏–µ –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–æ–º

if __name__ == '__main__':
    try:
        handle_polling_errors()
    except (KeyboardInterrupt, SystemExit):
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
    except Exception as e:
        logger.exception(f"–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
