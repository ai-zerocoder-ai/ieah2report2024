import json
import logging
import os
from pathlib import Path
import html  # –î–ª—è —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è HTML, –µ—Å–ª–∏ –≤—ã–±–µ—Ä–µ—Ç–µ —ç—Ç–æ—Ç –ø–æ–¥—Ö–æ–¥

import openai
from aiogram import Bot, Dispatcher, types
from aiogram.types import ParseMode
from aiogram.utils import executor
from aiogram.contrib.middlewares.logging import LoggingMiddleware
from aiogram.dispatcher.filters import Command
from aiogram.utils.markdown import escape_md  # –î–æ–±–∞–≤–ª–µ–Ω –∏–º–ø–æ—Ä—Ç –¥–ª—è —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è Markdown

from langchain_openai import OpenAIEmbeddings
from langchain_community.vectorstores import Chroma
from langchain.text_splitter import RecursiveCharacterTextSplitter
from langchain.docstore.document import Document
from dotenv import load_dotenv

from config import TELEGRAM_BOT_TOKEN, OPENAI_API_KEY

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
if not TELEGRAM_BOT_TOKEN:
    logger.error("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç TELEGRAM_BOT_TOKEN –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏.")
    exit(1)

if not OPENAI_API_KEY:
    logger.error("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç OPENAI_API_KEY –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏.")
    exit(1)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è OpenAI API
openai.api_key = OPENAI_API_KEY

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram –±–æ—Ç–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º MarkdownV2
bot = Bot(token=TELEGRAM_BOT_TOKEN, parse_mode=ParseMode.MARKDOWN_V2)
dp = Dispatcher(bot)
dp.middleware.setup(LoggingMiddleware())

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤
embedding = OpenAIEmbeddings()

# –ü—É—Ç—å –∫ –≤–µ–∫—Ç–æ—Ä–Ω–æ–π –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö Chroma
persist_directory = 'chroma_db'

# –ó–∞–≥—Ä—É–∑–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –≤–µ–∫—Ç–æ—Ä–Ω–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π
if Path(persist_directory).exists():
    vectordb = Chroma(
        embedding_function=embedding,
        persist_directory=persist_directory
    )
    logger.info("–í–µ–∫—Ç–æ—Ä–Ω–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö Chroma –∑–∞–≥—Ä—É–∂–µ–Ω–∞.")
else:
    # –ï—Å–ª–∏ –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Å–æ–∑–¥–∞–µ–º –µ–µ
    with open('knowledge_base.json', 'r', encoding='utf-8') as f:
        knowledge_base = json.load(f)

    # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ –±–∞–∑–∞ –∑–Ω–∞–Ω–∏–π –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∞ –∫–∞–∫ —Å–ø–∏—Å–æ–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
    documents = []
    for entry in knowledge_base:
        if isinstance(entry, dict):
            # –ï—Å–ª–∏ –∑–∞–ø–∏—Å—å ‚Äî —Å–ª–æ–≤–∞—Ä—å, –∏–∑–≤–ª–µ–∫–∞–µ–º 'title' –∏ 'content'
            content = entry.get('content', '')
            title = entry.get('title', 'Untitled Document')
            documents.append(f"Title: {title}\nContent: {content}")
        elif isinstance(entry, str):
            # –ï—Å–ª–∏ –∑–∞–ø–∏—Å—å ‚Äî —Å—Ç—Ä–æ–∫–∞, –¥–æ–±–∞–≤–ª—è–µ–º –µ—ë –Ω–∞–ø—Ä—è–º—É—é
            documents.append(entry)
        else:
            logger.warning(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∑–∞–ø–∏—Å–∏: {entry}")

    # –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –Ω–∞ —á–∞–Ω–∫–∏ —Å —É–º–µ–Ω—å—à–µ–Ω–Ω—ã–º —Ä–∞–∑–º–µ—Ä–æ–º
    text_splitter = RecursiveCharacterTextSplitter(
        chunk_size=1000,  # –£–º–µ–Ω—å—à–∏–ª–∏ —Ä–∞–∑–º–µ—Ä –∫–∞–∂–¥–æ–≥–æ —á–∞–Ω–∫–∞
        chunk_overlap=200,  # –£–º–µ–Ω—å—à–∏–ª–∏ –ø–µ—Ä–µ–∫—Ä—ã—Ç–∏–µ
        separators=["\n\n", "\n", " ", ""]
    )
    splitted_texts = text_splitter.split_text("\n\n".join(documents))
    logger.info(f"–ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π —Ä–∞–∑–¥–µ–ª–µ–Ω–∞ –Ω–∞ {len(splitted_texts)} —á–∞–Ω–∫–æ–≤.")

    # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —á–∞–Ω–∫–æ–≤ –≤ –æ–±—ä–µ–∫—Ç—ã Document
    doc_objects = [Document(page_content=chunk) for chunk in splitted_texts]

    # –°–æ–∑–¥–∞–Ω–∏–µ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤–µ–∫—Ç–æ—Ä–Ω–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    vectordb = Chroma.from_documents(
        documents=doc_objects,
        embedding=embedding,
        persist_directory=persist_directory
    )
    logger.info("–í–µ–∫—Ç–æ—Ä–Ω–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö Chroma —Å–æ–∑–¥–∞–Ω–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞.")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
def search_documents(query: str, top_k: int = 5) -> list:
    """
    –ü–æ–∏—Å–∫ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –≤ –≤–µ–∫—Ç–æ—Ä–Ω–æ–π –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤.
    """
    results = vectordb.similarity_search(query, k=top_k)
    relevant_docs = [doc.page_content for doc in results]
    return relevant_docs

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
async def generate_response(user_input: str) -> str:
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤–≤–æ–¥–∞ –∏ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤.
    """
    system_prompt = (
        "You are a helpful assistant. Use the provided knowledge base to answer the user's questions."
    )

    # –ü–æ–∏—Å–∫ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
    relevant_docs = search_documents(user_input, top_k=5)
    relevant_text = "\n\n".join(relevant_docs)

    user_prompt = (
        f"–í–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_input}\n\n"
        f"–†–µ–ª–µ–≤–∞–Ω—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏–∑ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π:\n{relevant_text}\n\n"
        "–û—Ç–≤–µ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞:"
    )

    try:
        # –û–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –≤—ã–∑–æ–≤ OpenAI API
        response = await openai.ChatCompletion.create(
            model="gpt-4o-mini",  # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –º–æ–¥–µ–ª—å —É–∫–∞–∑–∞–Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
            messages=[
                {"role": "system", "content": system_prompt},
                {"role": "user", "content": user_prompt}
            ],
            max_tokens=500,
            temperature=0.2,
            top_p=1,
            frequency_penalty=0,
            presence_penalty=0
        )
        answer = response.choices[0].message["content"].strip()
        logger.info(f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç: {answer}")
        return answer

    except Exception as e:
        logger.error(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        raise

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message_handler(Command("start"))
async def send_welcome(message: types.Message):
    welcome_text = (
        "üëã –≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–∞—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ AI-–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –±–∞–∑—É –∑–Ω–∞–Ω–∏–π –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω–æ–≥–æ —ç–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–æ–≥–æ –∞–≥–µ–Ω—Ç—Å—Ç–≤–∞ –ø–æ –≤–æ–¥–æ—Ä–æ–¥–Ω–æ–π —ç–Ω–µ—Ä–≥–µ—Ç–∏–∫–µ –∏ –Ω–∞ –µ–µ –æ—Å–Ω–æ–≤–µ –≤—ã–¥–∞–µ—Ç –æ—Ç–≤–µ—Ç—ã –ø–æ –∑–∞–ø—Ä–æ—Å–∞–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.\n\n"
        "üìå –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /iea, —á—Ç–æ–±—ã –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å. –ù–∞–ø—Ä–∏–º–µ—Ä:\n"
        "/iea –ö–∞–∫–æ–π —Å–ø—Ä–æ—Å –Ω–∞ –≤–æ–¥–æ—Ä–æ–¥ —Å–µ–π—á–∞—Å?\n\n"
        "–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª AI-–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ –∏ –±–∞–∑–∞ –∑–Ω–∞–Ω–∏–π –¥–ª—è —Ä–∞–±–æ—Ç—ã –ø–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–æ–≤ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é—Ç—Å—è –ø–æ –∂–µ–ª–∞–Ω–∏—é –∑–∞–∫–∞–∑—á–∏–∫–∞ - –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –≤ tattoointelligence.tech"
    )
    escaped_welcome_text = escape_md(welcome_text, version=2)  # –≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
    await message.reply(escaped_welcome_text, parse_mode=ParseMode.MARKDOWN_V2)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /iea
@dp.message_handler(Command("iea"))
async def handle_iea_command(message: types.Message):
    user_input = message.get_args()
    if not user_input:
        await message.reply(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /iea.\n–ü—Ä–∏–º–µ—Ä: /iea –ö–∞–∫–æ–π —Å–ø—Ä–æ—Å –Ω–∞ –≤–æ–¥–æ—Ä–æ–¥ —Å–µ–π—á–∞—Å?",
            parse_mode=ParseMode.MARKDOWN_V2
        )
        return

    try:
        response = await generate_response(user_input)
        escaped_response = escape_md(response, version=2)  # –≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
        await message.answer(escaped_response, parse_mode=ParseMode.MARKDOWN_V2)

    except Exception as e:
        logger.error(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        await message.reply(
            "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            parse_mode=ParseMode.MARKDOWN_V2
        )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
@dp.message_handler(lambda message: message.text.startswith('/') and not any(
    message.text.startswith(f"/{cmd}") for cmd in ["start", "iea"]
))
async def handle_unknown_commands(message: types.Message):
    await message.reply(
        "–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç—É –∫–æ–º–∞–Ω–¥—É. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ –∏–ª–∏ /iea –¥–ª—è –≤–æ–ø—Ä–æ—Å–æ–≤.",
        parse_mode=ParseMode.MARKDOWN_V2
    )

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == '__main__':
    try:
        logger.info("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
        executor.start_polling(dp, skip_updates=True)
    except (KeyboardInterrupt, SystemExit):
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
